package com.janabo.showgirls.dao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

/**
 * Entity mapped to table RECOMMEND_CONTENT.
 */
public class RecommendContent implements java.io.Serializable {

    private String imgUrl;
    private String title;
    private String content;
    private Long typeId;

    @Override
    public String toString() {
        return "RecommendContent{" +
                "title='" + title + '\'' +
                ", content='" + content + '\'' +
                ", imgUrl='" + imgUrl + '\'' +
                ", recommend=" + recommend +
                ", typeId=" + typeId +
                '}';
    }

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RecommendContentDao myDao;

    private Recommend recommend;
    private Long recommend__resolvedKey;


    public RecommendContent() {
    }

    public RecommendContent(String imgUrl, String title, String content, Long typeId) {
        this.imgUrl = imgUrl;
        this.title = title;
        this.content = content;
        this.typeId = typeId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRecommendContentDao() : null;
    }

    public String getImgUrl() {
        return imgUrl;
    }

    public void setImgUrl(String imgUrl) {
        this.imgUrl = imgUrl;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public Long getTypeId() {
        return typeId;
    }

    public void setTypeId(Long typeId) {
        this.typeId = typeId;
    }

    /** To-one relationship, resolved on first access. */
    public Recommend getRecommend() {
        Long __key = this.typeId;
        if (recommend__resolvedKey == null || !recommend__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RecommendDao targetDao = daoSession.getRecommendDao();
            Recommend recommendNew = targetDao.load(__key);
            synchronized (this) {
                recommend = recommendNew;
            	recommend__resolvedKey = __key;
            }
        }
        return recommend;
    }

    public void setRecommend(Recommend recommend) {
        synchronized (this) {
            this.recommend = recommend;
            typeId = recommend == null ? null : recommend.getId();
            recommend__resolvedKey = typeId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
